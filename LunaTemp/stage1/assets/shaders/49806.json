{"id":49806,"assetBundleId":-1,"data":[[],"Toony Colors Pro 2\/Standard PBS",null,["DIRECTIONAL","DIRLIGHTMAP_COMBINED","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_ON","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SHADOWS_DEPTH","SPOT","DYNAMICLIGHTMAP_ON","INSTANCING_ON","LIGHTMAP_SHADOW_MIXING","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_DETAIL_MULX2","_","___","__","SHADOWS_CUBE","SHADOWS_SOFT"],[[0,0,"FORWARD",4,"",0,[4,null],[0,"_ZWrite"],[2,null],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","FOG_EXP","FOG_EXP2","FOG_LINEAR","INSTANCING_ON","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","_","___","__"],[[["_","_NORMALMAP"],1],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["_","_EMISSION"],1],[["_","_METALLICGLOSSMAP"],1],[["___","_DETAIL_MULX2"],0],[["_","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],1],[["_","_SPECULARHIGHLIGHTS_OFF"],1],[["_","_GLOSSYREFLECTIONS_OFF"],1],[["_","_PARALLAXMAP"],1],[["_","TCP2_DISABLE_WRAPPED_LIGHT"],1],[["_","TCP2_RAMPTEXT"],1],[["_","TCP2_SPEC_TOON"],1],[["_","TCP2_STYLIZED_FRESNEL"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["__","INSTANCING_ON"],1],[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[0,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = log2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.y;\n    u_xlat16_9.x = exp2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = log2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.y;\n        u_xlat16_11.x = exp2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_48 = max(u_xlat16_48, 0.0);\n    u_xlat16_26.x = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_26.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = log2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.y;\n    u_xlat16_9.x = exp2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = log2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.y;\n        u_xlat16_11.x = exp2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_48 = max(u_xlat16_48, 0.0);\n    u_xlat16_26.x = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_26.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat16;\nvec3 u_xlat19;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nbool u_xlatb45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_55;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat16.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_4 * _OcclusionStrength + u_xlat16_48;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat16.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat45 = inversesqrt(u_xlat45);\n        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat19.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat19.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat4 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat19.xyz, u_xlat16_50);\n    u_xlat16_51 = u_xlat10_7.w + -1.0;\n    u_xlat16_51 = unity_SpecCube0_HDR.w * u_xlat16_51 + 1.0;\n    u_xlat16_51 = log2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.y;\n    u_xlat16_51 = exp2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_7.xyz * vec3(u_xlat16_51);\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat45 = inversesqrt(u_xlat45);\n            u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat19.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat45 = min(u_xlat8.z, u_xlat45);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat8.xyz;\n        } else {\n            u_xlat19.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat19.xyz, u_xlat16_50);\n        u_xlat16_55 = u_xlat10_5.w + -1.0;\n        u_xlat16_55 = unity_SpecCube1_HDR.w * u_xlat16_55 + 1.0;\n        u_xlat16_55 = log2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.y;\n        u_xlat16_55 = exp2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * vec3(u_xlat16_55);\n        u_xlat19.xyz = vec3(u_xlat16_51) * u_xlat10_7.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat19.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_12.xyz;\n    u_xlat16_51 = dot(u_xlat0.xyz, (-u_xlat16.xyz));\n    u_xlat16_55 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_27 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_27 = (-u_xlat16_12.x) + u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 + (-u_xlat16_12.x);\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_55 * -2.0 + 3.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_27 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_42 = dot(u_xlat0.xyz, u_xlat19.xyz);\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_57 = dot(_WorldSpaceLightPos0.xyz, u_xlat19.xyz);\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_13.x = dot(vec2(u_xlat16_57), vec2(u_xlat16_57));\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat4 + -0.5;\n    u_xlat16_55 = (-u_xlat16_12.x) * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_13.x * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = -abs(u_xlat16_51) + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_12.x + 1.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_13.x;\n    u_xlat16_55 = u_xlat16_27 * u_xlat16_55;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat30 = abs(u_xlat16_51) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_27 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_51);\n    u_xlat15 = u_xlat16_27 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_42 * u_xlat30 + (-u_xlat16_42);\n    u_xlat45 = u_xlat45 * u_xlat16_42 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_51 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_51 * 3.14159274;\n    u_xlat16_6.w = u_xlat16_27 * u_xlat15;\n    u_xlat16_6 = max(u_xlat16_6, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_27 = float(1.0) \/ u_xlat16_27;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_42!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_51 = u_xlat0.x * u_xlat16_6.w;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = vec3(u_xlat16_55) * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48) + u_xlat16_13.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_51) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_57) + 1.0;\n    u_xlat16_51 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_51;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz + u_xlat16_13.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat16_27);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat16;\nvec3 u_xlat19;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nbool u_xlatb45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_55;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat16.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_4 * _OcclusionStrength + u_xlat16_48;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat16.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat45 = inversesqrt(u_xlat45);\n        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat19.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat19.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat4 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat19.xyz, u_xlat16_50);\n    u_xlat16_51 = u_xlat16_7.w + -1.0;\n    u_xlat16_51 = unity_SpecCube0_HDR.w * u_xlat16_51 + 1.0;\n    u_xlat16_51 = log2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.y;\n    u_xlat16_51 = exp2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_51);\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat45 = inversesqrt(u_xlat45);\n            u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat19.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat45 = min(u_xlat8.z, u_xlat45);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat8.xyz;\n        } else {\n            u_xlat19.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat19.xyz, u_xlat16_50);\n        u_xlat16_55 = u_xlat16_5.w + -1.0;\n        u_xlat16_55 = unity_SpecCube1_HDR.w * u_xlat16_55 + 1.0;\n        u_xlat16_55 = log2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.y;\n        u_xlat16_55 = exp2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * vec3(u_xlat16_55);\n        u_xlat19.xyz = vec3(u_xlat16_51) * u_xlat16_7.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat19.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_12.xyz;\n    u_xlat16_51 = dot(u_xlat0.xyz, (-u_xlat16.xyz));\n    u_xlat16_55 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_27 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_27 = (-u_xlat16_12.x) + u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 + (-u_xlat16_12.x);\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_55 * -2.0 + 3.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_27 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_42 = dot(u_xlat0.xyz, u_xlat19.xyz);\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_57 = dot(_WorldSpaceLightPos0.xyz, u_xlat19.xyz);\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_13.x = dot(vec2(u_xlat16_57), vec2(u_xlat16_57));\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat4 + -0.5;\n    u_xlat16_55 = (-u_xlat16_12.x) * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_13.x * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = -abs(u_xlat16_51) + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_12.x + 1.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_13.x;\n    u_xlat16_55 = u_xlat16_27 * u_xlat16_55;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat30 = abs(u_xlat16_51) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_27 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_51);\n    u_xlat15 = u_xlat16_27 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_42 * u_xlat30 + (-u_xlat16_42);\n    u_xlat45 = u_xlat45 * u_xlat16_42 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_51 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_51 * 3.14159274;\n    u_xlat16_6.w = u_xlat16_27 * u_xlat15;\n    u_xlat16_6 = max(u_xlat16_6, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_27 = float(1.0) \/ u_xlat16_27;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_42!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_51 = u_xlat0.x * u_xlat16_6.w;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = vec3(u_xlat16_55) * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48) + u_xlat16_13.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_51) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_57) + 1.0;\n    u_xlat16_51 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_51;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz + u_xlat16_13.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat16_27);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp float u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_10) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_19 * 0.5 + 0.5;\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_28;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_28 = (-u_xlat16_10) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_10;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat16_28 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_28 = -abs(u_xlat16_28) + 1.0;\n    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat27 + -0.5;\n    u_xlat16_10 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_12;\n    u_xlat16_28 = u_xlat16_28 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12 + 1.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat10_2 * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_3.xzw = u_xlat16_5.xyz * vec3(u_xlat16_1) + u_xlat16_3.xzw;\n    u_xlat16_5.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat16_1 = (-u_xlat27) * u_xlat27 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat2.x * u_xlat2.x + 1.0;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_10);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_32 = (-u_xlat16_10) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_10);\n    u_xlat16_10 = u_xlat16_32 + _Glossiness;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_10);\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_10 = (-_RimMin) + _RimMax;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = u_xlat16_19 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_10) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_19 * 0.5 + 0.5;\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_28;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_28 = (-u_xlat16_10) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_10;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat16_28 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_28 = -abs(u_xlat16_28) + 1.0;\n    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat27 + -0.5;\n    u_xlat16_10 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_12;\n    u_xlat16_28 = u_xlat16_28 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12 + 1.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat16_2 * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_3.xzw = u_xlat16_5.xyz * vec3(u_xlat16_1) + u_xlat16_3.xzw;\n    u_xlat16_5.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat16_1 = (-u_xlat27) * u_xlat27 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat2.x * u_xlat2.x + 1.0;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_10);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_32 = (-u_xlat16_10) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_10);\n    u_xlat16_10 = u_xlat16_32 + _Glossiness;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_10);\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_10 = (-_RimMin) + _RimMax;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = u_xlat16_19 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat16;\nvec3 u_xlat19;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nbool u_xlatb45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_55;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat16.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_4 * _OcclusionStrength + u_xlat16_48;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat16.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat45 = inversesqrt(u_xlat45);\n        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat19.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat19.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat4 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat19.xyz, u_xlat16_50);\n    u_xlat16_51 = u_xlat10_7.w + -1.0;\n    u_xlat16_51 = unity_SpecCube0_HDR.w * u_xlat16_51 + 1.0;\n    u_xlat16_51 = log2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.y;\n    u_xlat16_51 = exp2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_7.xyz * vec3(u_xlat16_51);\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat45 = inversesqrt(u_xlat45);\n            u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat19.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat45 = min(u_xlat8.z, u_xlat45);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat8.xyz;\n        } else {\n            u_xlat19.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat19.xyz, u_xlat16_50);\n        u_xlat16_55 = u_xlat10_5.w + -1.0;\n        u_xlat16_55 = unity_SpecCube1_HDR.w * u_xlat16_55 + 1.0;\n        u_xlat16_55 = log2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.y;\n        u_xlat16_55 = exp2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * vec3(u_xlat16_55);\n        u_xlat19.xyz = vec3(u_xlat16_51) * u_xlat10_7.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat19.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_12.xyz;\n    u_xlat16_51 = dot(u_xlat0.xyz, (-u_xlat16.xyz));\n    u_xlat16_55 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_55 = u_xlat16_55 * 0.5 + 0.5;\n    u_xlat16_12.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_27 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_27 = (-u_xlat16_12.x) + u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 + (-u_xlat16_12.x);\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_55 * -2.0 + 3.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_27 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_42 = dot(u_xlat0.xyz, u_xlat19.xyz);\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_57 = dot(_WorldSpaceLightPos0.xyz, u_xlat19.xyz);\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_13.x = dot(vec2(u_xlat16_57), vec2(u_xlat16_57));\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat4 + -0.5;\n    u_xlat16_55 = (-u_xlat16_12.x) * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_13.x * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = -abs(u_xlat16_51) + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_12.x + 1.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_13.x;\n    u_xlat16_55 = u_xlat16_27 * u_xlat16_55;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat30 = abs(u_xlat16_51) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_27 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_51);\n    u_xlat15 = u_xlat16_27 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_42 * u_xlat30 + (-u_xlat16_42);\n    u_xlat45 = u_xlat45 * u_xlat16_42 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_51 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_51 * 3.14159274;\n    u_xlat16_6.w = u_xlat16_27 * u_xlat15;\n    u_xlat16_6 = max(u_xlat16_6, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_27 = float(1.0) \/ u_xlat16_27;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_42!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_51 = u_xlat0.x * u_xlat16_6.w;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = vec3(u_xlat16_55) * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48) + u_xlat16_13.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_51) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_57) + 1.0;\n    u_xlat16_51 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_51;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz + u_xlat16_13.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat16_27);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat16;\nvec3 u_xlat19;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nbool u_xlatb45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_55;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat16.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_4 * _OcclusionStrength + u_xlat16_48;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat16.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat45 = inversesqrt(u_xlat45);\n        u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat19.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat19.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat4 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat19.xyz, u_xlat16_50);\n    u_xlat16_51 = u_xlat16_7.w + -1.0;\n    u_xlat16_51 = unity_SpecCube0_HDR.w * u_xlat16_51 + 1.0;\n    u_xlat16_51 = log2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.y;\n    u_xlat16_51 = exp2(u_xlat16_51);\n    u_xlat16_51 = u_xlat16_51 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_7.xyz * vec3(u_xlat16_51);\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat45 = inversesqrt(u_xlat45);\n            u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat19.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat19.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat19.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat45 = min(u_xlat8.z, u_xlat45);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat45) + u_xlat8.xyz;\n        } else {\n            u_xlat19.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat19.xyz, u_xlat16_50);\n        u_xlat16_55 = u_xlat16_5.w + -1.0;\n        u_xlat16_55 = unity_SpecCube1_HDR.w * u_xlat16_55 + 1.0;\n        u_xlat16_55 = log2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.y;\n        u_xlat16_55 = exp2(u_xlat16_55);\n        u_xlat16_55 = u_xlat16_55 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * vec3(u_xlat16_55);\n        u_xlat19.xyz = vec3(u_xlat16_51) * u_xlat16_7.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat19.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_48) * u_xlat16_10.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat19.xyz = vec3(u_xlat45) * u_xlat16_12.xyz;\n    u_xlat16_51 = dot(u_xlat0.xyz, (-u_xlat16.xyz));\n    u_xlat16_55 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_55 = u_xlat16_55 * 0.5 + 0.5;\n    u_xlat16_12.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_27 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_27 = (-u_xlat16_12.x) + u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 + (-u_xlat16_12.x);\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_27;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = clamp(u_xlat16_55, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_55 * -2.0 + 3.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_27 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_42 = dot(u_xlat0.xyz, u_xlat19.xyz);\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_57 = dot(_WorldSpaceLightPos0.xyz, u_xlat19.xyz);\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_13.x = dot(vec2(u_xlat16_57), vec2(u_xlat16_57));\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat4 + -0.5;\n    u_xlat16_55 = (-u_xlat16_12.x) * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = u_xlat16_55 * u_xlat16_55;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_12.x;\n    u_xlat16_55 = u_xlat16_13.x * u_xlat16_55 + 1.0;\n    u_xlat16_12.x = -abs(u_xlat16_51) + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_12.x + 1.0;\n    u_xlat16_55 = u_xlat16_55 * u_xlat16_13.x;\n    u_xlat16_55 = u_xlat16_27 * u_xlat16_55;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat30 = abs(u_xlat16_51) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_27 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_51);\n    u_xlat15 = u_xlat16_27 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_42 * u_xlat30 + (-u_xlat16_42);\n    u_xlat45 = u_xlat45 * u_xlat16_42 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_51 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_51 * 3.14159274;\n    u_xlat16_6.w = u_xlat16_27 * u_xlat15;\n    u_xlat16_6 = max(u_xlat16_6, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_27 = float(1.0) \/ u_xlat16_27;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_42!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_51 = u_xlat0.x * u_xlat16_6.w;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = vec3(u_xlat16_55) * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48) + u_xlat16_13.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_51) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_57) + 1.0;\n    u_xlat16_51 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_51;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz + u_xlat16_13.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat16_27);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = log2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.y;\n    u_xlat16_9.x = exp2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = log2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.y;\n        u_xlat16_11.x = exp2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_48 = max(u_xlat16_48, 0.0);\n    u_xlat16_26.x = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_26.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_47 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = log2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.y;\n    u_xlat16_9.x = exp2(u_xlat16_9.x);\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = log2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.y;\n        u_xlat16_11.x = exp2(u_xlat16_11.x);\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_48 = max(u_xlat16_48, 0.0);\n    u_xlat16_26.x = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_26.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_9) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_17 * 0.5 + 0.5;\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_25;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_25 = (-u_xlat16_9) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_9;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat16_25 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_25 = -abs(u_xlat16_25) + 1.0;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat24 + -0.5;\n    u_xlat16_9 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_11;\n    u_xlat16_25 = u_xlat16_25 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_1 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_9 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat16_1 = u_xlat16_9 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_1);\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat10_0.x * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_7.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat0.x = u_xlat24 * u_xlat24;\n    u_xlat16_1 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_9);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = u_xlat16_17 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_9) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_17 * 0.5 + 0.5;\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_25;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_25 = (-u_xlat16_9) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_9;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat16_25 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_25 = -abs(u_xlat16_25) + 1.0;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat24 + -0.5;\n    u_xlat16_9 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_11;\n    u_xlat16_25 = u_xlat16_25 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_1 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_9 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat16_1 = u_xlat16_9 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_1);\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat16_0.x * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_7.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat0.x = u_xlat24 * u_xlat24;\n    u_xlat16_1 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_9);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = u_xlat16_17 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp float u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_10) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_19;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_28 = (-u_xlat16_10) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_10;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat16_28 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_28 = -abs(u_xlat16_28) + 1.0;\n    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat27 + -0.5;\n    u_xlat16_10 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_12;\n    u_xlat16_28 = u_xlat16_28 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12 + 1.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat10_2 * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_3.xzw = u_xlat16_5.xyz * vec3(u_xlat16_1) + u_xlat16_3.xzw;\n    u_xlat16_5.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat16_1 = (-u_xlat27) * u_xlat27 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat2.x * u_xlat2.x + 1.0;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_10);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_32 = (-u_xlat16_10) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_10);\n    u_xlat16_10 = u_xlat16_32 + _Glossiness;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_10);\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_10 = (-_RimMin) + _RimMax;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = u_xlat16_19 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump float u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_10) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_19 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_19;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_28 = (-u_xlat16_10) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_28 * u_xlat16_10;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat16_28 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_28 = -abs(u_xlat16_28) + 1.0;\n    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat27 + -0.5;\n    u_xlat16_10 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_28 * u_xlat16_12;\n    u_xlat16_28 = u_xlat16_28 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12 + 1.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat16_2 * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_3.xzw = u_xlat16_5.xyz * vec3(u_xlat16_1) + u_xlat16_3.xzw;\n    u_xlat16_5.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat16_1 = (-u_xlat27) * u_xlat27 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_10 = u_xlat2.x * u_xlat2.x + 1.0;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_10);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_32 = (-u_xlat16_10) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_10);\n    u_xlat16_10 = u_xlat16_32 + _Glossiness;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_10);\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_10 = (-_RimMin) + _RimMax;\n    u_xlat16_10 = float(1.0) \/ u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_10 * -2.0 + 3.0;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_28;\n    u_xlat16_10 = u_xlat16_10 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10;\n    u_xlat16_1 = u_xlat16_19 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_9) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_17;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_25 = (-u_xlat16_9) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_9;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat16_25 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_25 = -abs(u_xlat16_25) + 1.0;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat24 + -0.5;\n    u_xlat16_9 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_11;\n    u_xlat16_25 = u_xlat16_25 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_1 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_9 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat16_1 = u_xlat16_9 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_1);\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_0.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat10_0.x * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_7.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat0.x = u_xlat24 * u_xlat24;\n    u_xlat16_1 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_9);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = u_xlat16_17 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_GLOSSYREFLECTIONS_OFF","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat16_1 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_1 = (-u_xlat16_9) + u_xlat16_1;\n    u_xlat16_1 = float(1.0) \/ u_xlat16_1;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_17 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_17;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_1 * -2.0 + 3.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_25 = (-u_xlat16_9) * u_xlat16_1 + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_25 * u_xlat16_9;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat16_25 = dot(u_xlat2.xyz, (-u_xlat4.xyz));\n    u_xlat16_25 = -abs(u_xlat16_25) + 1.0;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat24 + -0.5;\n    u_xlat16_9 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_25 * u_xlat16_11;\n    u_xlat16_25 = u_xlat16_25 + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_5.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_3.xzw = vec3(u_xlat16_1) * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xzw * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_1 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_9 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    u_xlat16_1 = u_xlat16_9 + _Glossiness;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_1);\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_1 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_1 = u_xlat16_0.x * _OcclusionStrength + u_xlat16_1;\n    u_xlat16_7.xyz = vec3(u_xlat16_1) * unity_IndirectSpecColor.xyz;\n    u_xlat0.x = u_xlat24 * u_xlat24;\n    u_xlat16_1 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_9 = u_xlat0.x * u_xlat0.x + 1.0;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_9);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_9 = (-_RimMin) + _RimMax;\n    u_xlat16_9 = float(1.0) \/ u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_9 * -2.0 + 3.0;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_25;\n    u_xlat16_9 = u_xlat16_9 * _RimStrength;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_9;\n    u_xlat16_1 = u_xlat16_17 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0]],[],0],[1,0,"FORWARD_DELTA",5,"",0,[4,null],[0,null],[2,null],[[0,"_SrcBlend"],[1,null],[0,null]],[[0,"_SrcBlend"],[1,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_SHADOW_MIXING","POINT","POINT_COOKIE","SHADOWS_CUBE","SHADOWS_DEPTH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","SHADOWS_SOFT","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","_","___","__"],[[["_","_NORMALMAP"],1],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["_","_METALLICGLOSSMAP"],1],[["_","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],1],[["_","_SPECULARHIGHLIGHTS_OFF"],1],[["___","_DETAIL_MULX2"],0],[["_","_PARALLAXMAP"],1],[["_","TCP2_DISABLE_WRAPPED_LIGHT"],1],[["_","TCP2_RAMPTEXT"],1],[["_","TCP2_SPEC_TOON"],1],[["_","TCP2_STYLIZED_FRESNEL"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["POINT"],0],[["DIRECTIONAL"],0],[["SPOT"],0],[["POINT_COOKIE"],0],[["DIRECTIONAL_COOKIE"],0],[["POINT","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT"],0],[["SPOT","SHADOWS_DEPTH","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT_COOKIE","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_18 = max(u_xlat16_18, 0.0);\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_18 = max(u_xlat16_18, 0.0);\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nbool u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    u_xlat16_22 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_22 = dot(vec2(u_xlat16_22), vec2(u_xlat16_22));\n    u_xlat21 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat21 + -0.5;\n    u_xlat16_3.x = (-u_xlat21) * u_xlat21 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat16_10 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_17 = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat16_17 = -abs(u_xlat16_17) + 1.0;\n    u_xlat16_24 = u_xlat16_10 * 0.5 + 0.5;\n    u_xlat16_5.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_5.x);\n    u_xlat16_12 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_12;\n    u_xlat16_5.x = float(1.0) \/ u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_12 = (-u_xlat16_5.x) * u_xlat16_24 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_12;\n    u_xlat16_17 = u_xlat16_17 + (-_RimMin);\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_24 * u_xlat16_22;\n    u_xlat16_5.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_5.xyz = _SColor.www * u_xlat16_5.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_22 = (-_RimMin) + _RimMax;\n    u_xlat16_22 = float(1.0) \/ u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_17 = u_xlat16_22 * -2.0 + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * _RimStrength;\n    u_xlat16_22 = u_xlat16_3.x * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_10 * u_xlat16_22;\n    u_xlat16_3.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nbool u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    u_xlat16_22 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_22 = dot(vec2(u_xlat16_22), vec2(u_xlat16_22));\n    u_xlat21 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat21 + -0.5;\n    u_xlat16_3.x = (-u_xlat21) * u_xlat21 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat16_10 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_17 = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat16_17 = -abs(u_xlat16_17) + 1.0;\n    u_xlat16_24 = u_xlat16_10 * 0.5 + 0.5;\n    u_xlat16_5.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_5.x);\n    u_xlat16_12 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_12;\n    u_xlat16_5.x = float(1.0) \/ u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_12 = (-u_xlat16_5.x) * u_xlat16_24 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_12;\n    u_xlat16_17 = u_xlat16_17 + (-_RimMin);\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_24 * u_xlat16_22;\n    u_xlat16_5.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_5.xyz = _SColor.www * u_xlat16_5.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_22 = (-_RimMin) + _RimMax;\n    u_xlat16_22 = float(1.0) \/ u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_17 = u_xlat16_22 * -2.0 + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * _RimStrength;\n    u_xlat16_22 = u_xlat16_3.x * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_10 * u_xlat16_22;\n    u_xlat16_3.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_18 = max(u_xlat16_18, 0.0);\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_18 = max(u_xlat16_18, 0.0);\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_SPECULARHIGHLIGHTS_OFF"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nbool u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    u_xlat16_22 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_22 = dot(vec2(u_xlat16_22), vec2(u_xlat16_22));\n    u_xlat21 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat21 + -0.5;\n    u_xlat16_3.x = (-u_xlat21) * u_xlat21 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat16_10 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_17 = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat16_17 = -abs(u_xlat16_17) + 1.0;\n    u_xlat16_24 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_24) + u_xlat16_10;\n    u_xlat16_12 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_24 = (-u_xlat16_24) + u_xlat16_12;\n    u_xlat16_24 = float(1.0) \/ u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_12 = (-u_xlat16_5.x) * u_xlat16_24 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_12;\n    u_xlat16_17 = u_xlat16_17 + (-_RimMin);\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_24 * u_xlat16_22;\n    u_xlat16_5.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_5.xyz = _SColor.www * u_xlat16_5.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_22 = (-_RimMin) + _RimMax;\n    u_xlat16_22 = float(1.0) \/ u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_17 = u_xlat16_22 * -2.0 + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * _RimStrength;\n    u_xlat16_22 = u_xlat16_3.x * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_10 * u_xlat16_22;\n    u_xlat16_3.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHATEST_ON","_SPECULARHIGHLIGHTS_OFF"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nbool u_xlatb21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    u_xlat16_22 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_22 = dot(vec2(u_xlat16_22), vec2(u_xlat16_22));\n    u_xlat21 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat21 + -0.5;\n    u_xlat16_3.x = (-u_xlat21) * u_xlat21 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat16_10 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n    u_xlat16_17 = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat16_17 = -abs(u_xlat16_17) + 1.0;\n    u_xlat16_24 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_24) + u_xlat16_10;\n    u_xlat16_12 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_24 = (-u_xlat16_24) + u_xlat16_12;\n    u_xlat16_24 = float(1.0) \/ u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_12 = (-u_xlat16_5.x) * u_xlat16_24 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_12 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_17 * u_xlat16_12;\n    u_xlat16_17 = u_xlat16_17 + (-_RimMin);\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_24 * u_xlat16_22;\n    u_xlat16_5.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_5.xyz = _SColor.www * u_xlat16_5.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_22 = (-_RimMin) + _RimMax;\n    u_xlat16_22 = float(1.0) \/ u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_17 = u_xlat16_22 * -2.0 + 3.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * _RimStrength;\n    u_xlat16_22 = u_xlat16_3.x * u_xlat16_22;\n    u_xlat16_22 = u_xlat16_10 * u_xlat16_22;\n    u_xlat16_3.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0]],[],0],[2,0,"ShadowCaster",8,"",0,[4,null],[1,null],[2,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["INSTANCING_ON","SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_","__"],[[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["__","INSTANCING_ON"],1],[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[],[],0]],[],[["_Color",0,1,1,1,1,"",0],["_MainTex",4,0,0,0,0,"white",0],["_Cutoff",3,0.5,0,1,0,"",0],["_Glossiness",3,0.5,0,1,0,"",0],["_GlossMapScale",3,1,0,1,0,"",0],["_SmoothnessTextureChannel",2,0,0,0,0,"",0],["_Metallic",3,0,0,1,0,"",32],["_MetallicGlossMap",4,0,0,0,0,"white",0],["_SpecularHighlights",2,1,0,0,0,"",0],["_GlossyReflections",2,1,0,0,0,"",0],["_BumpScale",2,1,0,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_Parallax",3,0.0199999995529652,0.00499999988824129,0.0799999982118607,0,"",0],["_ParallaxMap",4,0,0,0,0,"black",0],["_OcclusionStrength",3,1,0,1,0,"",0],["_OcclusionMap",4,0,0,0,0,"white",0],["_EmissionColor",0,0,0,0,1,"",0],["_EmissionMap",4,0,0,0,0,"white",0],["_DetailMask",4,0,0,0,0,"white",0],["_DetailAlbedoMap",4,0,0,0,0,"grey",0],["_DetailNormalMapScale",2,1,0,0,0,"",0],["_DetailNormalMap",4,0,0,0,0,"bump",0],["_UVSec",2,0,0,0,0,"",0],["_Mode",2,0,0,0,0,"",1],["_SrcBlend",2,1,0,0,0,"",1],["_DstBlend",2,0,0,0,0,"",1],["_ZWrite",2,1,0,0,0,"",1],["_HColor",0,1,1,1,1,"",0],["_SColor",0,0.25,0.25,0.25,1,"",0],["_TCP2_DISABLE_WRAPPED_LIGHT",2,1,0,0,0,"",0],["_TCP2_RAMPTEXT",2,0,0,0,0,"",0],["_Ramp",4,0,0,0,0,"gray",0],["_RampThreshold",3,0.5,0,1,0,"",0],["_RampSmooth",3,0.200000002980232,0,1,0,"",0],["_RampSmoothAdd",3,0.75,0,1,0,"",0],["_TCP2_SPEC_TOON",2,0,0,0,0,"",0],["_SpecSmooth",3,1,0,1,0,"",0],["_SpecBlend",3,1,0,1,0,"",0],["_TCP2_STYLIZED_FRESNEL",2,0,0,0,0,"",0],["_RimColor",0,0.800000011920929,0.800000011920929,0.800000011920929,0.600000023841858,"",0],["_RimStrength",3,0.5,0,2,0,"",0],["_RimMin",3,0.600000023841858,0,1,0,"",0],["_RimMax",3,0.850000023841858,0,1,0,"",0],["_EnableOutline",2,0,0,0,0,"",1]],0,304,0,0,0]}